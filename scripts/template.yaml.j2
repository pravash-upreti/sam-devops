---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Express Application/API powered by API Gateway and Lambda

Parameters:
  RDSState:
    Type: String
    Default: false
    NoEcho: true
    Description: Attach to vpc
    
  RDSSecurityGroup:
    Type: String    
    NoEcho: true
    Description: Attach to vpc

  BaseStack:
    Type: String
    Default: base-stack-name
    NoEcho: true
    Description: Base SAM stack

  MicorServiceName:
    Type: String
    Default: microservice
    NoEcho: true
    Description: Microservice name  
  {% for dict_item in list %}    
  {% for snake_case, CamelCase in dict_item["vault"].items() %}
  {{ CamelCase }}:
    Type: String
    NoEcho: true
  {% endfor %}  
  {% endfor %}


Conditions:
  RDSState:
    Fn::Equals: [true, Ref: RDSState]
  
  RDSSecurityGroup:
    Fn::Not: 
      - Fn::Equals: 
          - ''
          - Ref: RDSSecurityGroup

  ShouldAttachToSubnet:
    Fn::Or: [Condition: RDSState ,Condition: RDSSecurityGroup]

Resources:

  MicroServiceResource: 
    Type: AWS::ApiGateway::Resource
    Properties: 
      RestApiId: 
        Fn::ImportValue:
          !Sub "${BaseStack}-rest-api-id-{{list[0]["CI_COMMIT_REF_SLUG"]}}"
      ParentId:
        Fn::ImportValue:
          !Sub "${BaseStack}-api-path-reference"
      PathPart: {{list[0]["MICRO_SERVICE_NAME"]}}

  MicroServiceAllMethod:
    DependsOn:
      - MicroServiceResource
      - AwsServerlessExpressFunction
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      ResourceId:
        !Ref MicroServiceResource
      RestApiId:
        Fn::ImportValue:
          !Sub "${BaseStack}-rest-api-id-{{list[0]["CI_COMMIT_REF_SLUG"]}}"
      AuthorizationType: NONE
      
      Integration:        
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: 
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:{{list[0]["AWS_DEFAULT_REGION"]}}:lambda:path/2015-03-31/functions/arn:aws:lambda:{{list[0]["AWS_DEFAULT_REGION"]}}:{{list[0]["AWS_ACCOUNT_ID"]}}:function:"
              - !Ref AwsServerlessExpressFunction
              - "/invocations"
        PassthroughBehavior: WHEN_NO_MATCH
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
      
      #RequestParameters:
      #  method.request.in.proxy: true
      
      
  
  MicroServiceOptionMethod:    
    DependsOn: "MicroServiceAllMethod"
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        !Ref MicroServiceResource
      RestApiId:
        Fn::ImportValue:
          !Sub "${BaseStack}-rest-api-id-{{list[0]["CI_COMMIT_REF_SLUG"]}}"
      AuthorizationType: NONE
      Integration:
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            #ResponseTemplates:
              #application/json: "{\"statusCode\": 200}"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: "{statusCode: 200}"
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  
  
  
  ProxyResource: 
    DependsOn: "MicroServiceOptionMethod"
    Type: AWS::ApiGateway::Resource
    Properties: 
      RestApiId: 
        Fn::ImportValue:
          !Sub "${BaseStack}-rest-api-id-{{list[0]["CI_COMMIT_REF_SLUG"]}}"
      ParentId:
        #Fn::ImportValue:
        #  !Sub "${BaseStack}-rest-api-root-id"
        !Ref "MicroServiceResource"
      PathPart: "{proxy+}"
  
  
  ProxyOptionMethod:    
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId:
        !Ref ProxyResource
      RestApiId:
        Fn::ImportValue:
          !Sub "${BaseStack}-rest-api-id-{{list[0]["CI_COMMIT_REF_SLUG"]}}"
      AuthorizationType: NONE
      Integration:
        ContentHandling: CONVERT_TO_TEXT
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            #ResponseTemplates:
              #application/json: "{\"statusCode\": 200}"
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: "{statusCode: 200}"
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  
  ProxyAllMethod:    
    DependsOn: "ProxyOptionMethod"
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      ResourceId:
        !Ref ProxyResource
      RestApiId:        
        Fn::ImportValue:
          !Sub "${BaseStack}-rest-api-id-{{list[0]["CI_COMMIT_REF_SLUG"]}}"
      AuthorizationType: NONE
      
      Integration:
        IntegrationHttpMethod: "POST"
        Type: "AWS_PROXY"
        Uri: 
          Fn::Join:
            - ""
            - - "arn:aws:apigateway:{{list[0]["AWS_DEFAULT_REGION"]}}:lambda:path/2015-03-31/functions/arn:aws:lambda:{{list[0]["AWS_DEFAULT_REGION"]}}:{{list[0]["AWS_ACCOUNT_ID"]}}:function:"
              - !Ref AwsServerlessExpressFunction
              - "/invocations"        
      RequestParameters:
        method.request.path.proxy: true
      
  #ApiDeployment: 
  #  DependsOn: "ProxyAllMethod"    
  #  Type: AWS::ApiGateway::Deployment
  #  Properties: 
  #    RestApiId: 
  #      Fn::ImportValue:
  #        !Sub "${BaseStack}-rest-api-id-{{list[0]["CI_COMMIT_REF_SLUG"]}}"
  #    Description: "Default Deployment"
  #    StageName: "api"
      
  ConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    # - ApiGatewayApi
    - AwsServerlessExpressFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AwsServerlessExpressFunction
      Principal: apigateway.amazonaws.com

  #ApiGatewayApi:
  #  Type: AWS::Serverless::Api
  #  Properties:
  #    DefinitionUri: ../build/simple-proxy-api.yaml
  #    StageName: default
  #    Variables:
  #      ServerlessExpressLambdaFunctionName: !Ref AwsServerlessExpressFunction

#   LambdaExecutionRole:
#     Type: AWS::IAM::Role
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: '2012-10-17'
#         Statement:
#           Effect: Allow
#           Principal:
#             Service: lambda.amazonaws.com
#           Action: sts:AssumeRole
#       Path: "/"
#       Policies:
#       - PolicyName: root
#         PolicyDocument:
#           Version: '2012-10-17'
#           Statement:
#           - Effect: Allow
#             Action:
#             - logs:CreateLogGroup
#             - logs:CreateLogStream
#             - logs:PutLogEvents
#             Resource: arn:aws:logs:*:*:*


  LambdaApiGatewayExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AwsServerlessExpressFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - Fn::ImportValue:
              !Sub "${BaseStack}-rest-api-id-{{list[0]["CI_COMMIT_REF_SLUG"]}}"
          - "/*/*"
  
  # RDSState:
    

  AwsServerlessExpressFunction:
    Type: AWS::Lambda::Function
    Properties:
      VpcConfig: 
        Fn::If:
          - ShouldAttachToSubnet
          - SecurityGroupIds:
              Fn::If:
                - RDSState
                - - Fn::ImportValue:
                      !Sub "${BaseStack}-rds-security-group"
                - - Fn::If:
                      - RDSSecurityGroup
                      - Ref: RDSSecurityGroup
                      - Ref: AWS::NoValue
            
            SubnetIds:
              - Fn::ImportValue:
                  !Sub "${BaseStack}-private-subnet-a"
              - Fn::ImportValue: 
                  !Sub "${BaseStack}-private-subnet-b"
            
          - Ref: AWS::NoValue
      
        
      Code:
        S3Bucket: {{list[0]["S3_BUCKET_NAME"]}}
        S3Key: {{list[0]["FUNCTION_NAME"]}}.zip

      Handler: lambda.handler
      MemorySize: 1024
      Role: 
        Fn::ImportValue:
          !Sub "${BaseStack}-lambda-execution-role"
    #   Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Environment:
        Variables:
          {% for dict_item in list %}
          {% for snake_case, CamelCase in dict_item["vault"].items() %}
          {{ snake_case }}: !Sub {{ '${'+CamelCase+'}' }}
          {% endfor %}
          {% endfor %}
        
      #Events:
      #  ProxyApiRoot:
      #    Type: Api
      #    Properties:
      #      RestApiId: 
      #        Fn::ImportValue:
      #          !Sub "${BaseStack}-rest-api-id-{{list[0]["CI_COMMIT_REF_SLUG"]}}"
      #      Path: /
      #      Method: ANY
      #  ProxyApiGreedy:
      #    Type: Api
      #    Properties:
      #      RestApiId:
      #        Fn::ImportValue:
      #          !Sub "${BaseStack}-rest-api-id-{{list[0]["CI_COMMIT_REF_SLUG"]}}"
      #      #!Ref ApiGatewayApi
      #      Path: /{proxy+}
      #      Method: ANY
     
#Outputs:
#  LambdaFunctionConsoleUrl:
#    Description: Console URL for the Lambda Function.
#    Value: !Join
#      - ''
#      - - https://
#        - !Ref AWS::Region
#        - ".console.aws.amazon.com/lambda/home?region="
#        - !Ref AWS::Region
#        - "#/functions/"
#        - !Ref AwsServerlessExpressFunction

#  ApiGatewayApiConsoleUrl:
#    Description: Console URL for the API Gateway API's Stage.
#    Value: !Join
#      - ''
#      - - https://
#        - !Ref AWS::Region
#        - ".console.aws.amazon.com/apigateway/home?region="
#        - !Ref AWS::Region
#        - "#/apis/"
#        - !Ref ApiGatewayApi
#        - "/stages/default"

#  ApiUrl:
#    Description: Invoke URL for your API. Clicking this link will perform a GET request
#      on the root resource of your API.
#    Value: !Join
#      - ''
#      - - https://
#        - !Ref ApiGatewayApi
#        - ".execute-api."
#        - !Ref AWS::Region
#        - ".amazonaws.com/default/"
