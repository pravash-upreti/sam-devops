---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Express Application/API powered by API Gateway and Lambda

Parameters:
  RDSState:
    Type: String
    Default: false
    NoEcho: true
    Description: Attach to vpc
    
  RDSSecurityGroup:
    Type: String    
    NoEcho: true
    Description: Attach to vpc

  BaseStack:
    Type: String
    Default: lms-timesheet
    NoEcho: true
    Description: Base SAM stack

  JWTSecret:
    Type: String
    NoEcho: true

  DBClient:
    Type: String
    NoEcho: true

  DBPort:
    Type: String
    NoEcho: true

  COOKIESDuration:
    Type: String
    NoEcho: true

  DBUser:
    Type: String
    NoEcho: true

  DBName:
    Type: String
    NoEcho: true

  DBHost:
    Type: String
    NoEcho: true

  CLIENTId:
    Type: String
    NoEcho: true

  JWTExpire:
    Type: String
    NoEcho: true

  JWTToken:
    Type: String
    NoEcho: true

  JWTRefreshTokenExpire:
    Type: String
    NoEcho: true

  DBPassword:
    Type: String
    NoEcho: true



Conditions:
  RDSState:
    Fn::Equals: [true, Ref: RDSState]
  
  RDSSecurityGroup:
    Fn::Not: 
      - Fn::Equals: 
          - ''
          - Ref: RDSSecurityGroup

  ShouldAttachToSubnet:
    Fn::Or: [Condition: RDSState ,Condition: RDSSecurityGroup]

Resources:
  ConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - ApiGatewayApi
    - AwsServerlessExpressFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AwsServerlessExpressFunction
      Principal: apigateway.amazonaws.com

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionUri: ../build/simple-proxy-api.yaml
      StageName: prod
      Variables:
        ServerlessExpressLambdaFunctionName: !Ref AwsServerlessExpressFunction


#   LambdaExecutionRole:
#     Type: AWS::IAM::Role
#     Properties:
#       AssumeRolePolicyDocument:
#         Version: '2012-10-17'
#         Statement:
#           Effect: Allow
#           Principal:
#             Service: lambda.amazonaws.com
#           Action: sts:AssumeRole
#       Path: "/"
#       Policies:
#       - PolicyName: root
#         PolicyDocument:
#           Version: '2012-10-17'
#           Statement:
#           - Effect: Allow
#             Action:
#             - logs:CreateLogGroup
#             - logs:CreateLogStream
#             - logs:PutLogEvents
#             Resource: arn:aws:logs:*:*:*


  LambdaApiGatewayExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt AwsServerlessExpressFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref ApiGatewayApi
          - "/*/*"
  
  # RDSState:
    

  AwsServerlessExpressFunction:
    Type: AWS::Serverless::Function
    Properties:
      VpcConfig: 
        Fn::If:
          - ShouldAttachToSubnet
          - SecurityGroupIds:
              Fn::If:
                - RDSState
                - - Fn::ImportValue:
                      !Sub "${BaseStack}-rds-security-group"
                - - Fn::If:
                      - RDSSecurityGroup
                      - Ref: RDSSecurityGroup
                      - Ref: AWS::NoValue
            
            SubnetIds:
              - Fn::ImportValue:
                  !Sub "${BaseStack}-private-subnet-a"
              - Fn::ImportValue: 
                  !Sub "${BaseStack}-private-subnet-b"
            
          - Ref: AWS::NoValue
          
      CodeUri: ../build
      Handler: lambda.handler
      MemorySize: 1024
      Role: 
        Fn::ImportValue:
          !Sub "${BaseStack}-lambda-execution-role"
    #   Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs8.10
      Timeout: 30
      Environment:
        Variables:
          JWT_SECRET: !Sub ${JWTSecret}
          DB_CLIENT: !Sub ${DBClient}
          DB_PORT: !Sub ${DBPort}
          COOKIES_DURATION: !Sub ${COOKIESDuration}
          DB_USER: !Sub ${DBUser}
          DB_NAME: !Sub ${DBName}
          DB_HOST: !Sub ${DBHost}
          CLIENT_ID: !Sub ${CLIENTId}
          JWT_EXPIRE: !Sub ${JWTExpire}
          JWT_TOKEN: !Sub ${JWTToken}
          JWT_REFRESH_TOKEN_EXPIRE: !Sub ${JWTRefreshTokenExpire}
          DB_PASSWORD: !Sub ${DBPassword}
        
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY
     
Outputs:
  LambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Join
      - ''
      - - https://
        - !Ref AWS::Region
        - ".console.aws.amazon.com/lambda/home?region="
        - !Ref AWS::Region
        - "#/functions/"
        - !Ref AwsServerlessExpressFunction

  ApiGatewayApiConsoleUrl:
    Description: Console URL for the API Gateway API's Stage.
    Value: !Join
      - ''
      - - https://
        - !Ref AWS::Region
        - ".console.aws.amazon.com/apigateway/home?region="
        - !Ref AWS::Region
        - "#/apis/"
        - !Ref ApiGatewayApi
        - "/stages/prod"

  ApiUrl:
    Description: Invoke URL for your API. Clicking this link will perform a GET request
      on the root resource of your API.
    Value: !Join
      - ''
      - - https://
        - !Ref ApiGatewayApi
        - ".execute-api."
        - !Ref AWS::Region
        - ".amazonaws.com/prod/"